\documentclass[letterpaper,12pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{tabularx} 
\usepackage{amsmath}  
\usepackage{graphicx} 
\usepackage[margin=1in,letterpaper]{geometry}
\usepackage[final]{hyperref} 
\usepackage{listings}
\usepackage[english,french]{babel}
\selectlanguage{french}
\usepackage{xcolor}
\usepackage{minted}
\usepackage{mdframed}
\usemintedstyle{monokai}
\definecolor{bg}{rgb}{0.14,0.14,0.14}

\definecolor{mygray}{rgb}{0.4,0.4,0.4}
\definecolor{mygreen}{rgb}{0.40,0.70,0.30}
\definecolor{myorange}{rgb}{1.0,0.4,0}

\newcommand{\question}[1]{\paragraph{#1\\ \vspace{0.5cm}}}

\lstdefinestyle{C}
{
basicstyle=\footnotesize\sffamily\color{black},
commentstyle=\color{mygray},
breaklines=true,
frame=single,
numbers=left,
numbersep=5pt,
numberstyle=\tiny\color{mygray},
keywordstyle=\color{mygreen},
showspaces=false,
showstringspaces=false,
stringstyle=\color{myorange},
tabsize=2
}


\lstdefinestyle{BASH}
{
    backgroundcolor=\color{black},
    basicstyle=\scriptsize\color{white}\ttfamily
}

\lstset{style=C}

\begin{document}

\title{Systèmes Parallèles -- Lab. Session 3\\
\vspace{0.5cm}
Introduction au parallélisme en mémoire partagée
Intel TBB}
\author{\textsc{Guillaume Leignier, Vincent Pasquereau, Thibaut Vercueil}}
\date{5 novembre 2015}

%TODO : Faire un saut de page
\maketitle
\newpage
\tableofcontents


\newpage
\section{Évaluation des performances paralèlles}
\textit{L'ensemble du TP a été réalisé sur un processeur Intel i5 -- 4 coeurs.}
\newline 
\newline
\subsection{Annexe A}
\textnormal{Modifier le code de l’annexe en utilisant la bibliothèque TBB et en vous concentrant sur une approche par
parallélisme de données. On doit pouvoir fixer le nombre de threads à utiliser en le passant en paramètre de
votre programme. (Cf: code en Annexe A)}

\subsubsection{Mesurer le temps d’exécution du code de chaque annexe modifiée en faisant varier n, le nombre de threads, de 1 à 8.}

Pour le code A, on a :

\begin{center}
\begin{tabular}{|c||c|c|c|c|c|c|c|c|}
  \hline
  Threads & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 \\
  \hline
  Temps & 1.02 & 0.55 & 0.38 & 0.30 & 0.31 & 0.32 & 0.30 & 0.31 \\
  \hline 
\end{tabular}
\end{center}

\textnormal{Au premier coup d'oeil, on constate que le temps d'éxécution entre 1 thread et 2 threads est pratiquement divisé par deux! On peut donc penser que la parallélisation du programme avec TBB est opérante.}

\vspace{0.5cm}
\includegraphics[scale=0.5]{tmp_thread.png}
\vspace{0.5cm}

\textnormal{On remarque une diminution du temps d'éxécution en fonction du nombre de Threads dédiés au programme. Cependant, on note une stagnation du temps à partir de quatre Threads. Cela s'explique par le fait que notre machine virtuelle est seulement dotée de quatre coeurs.} 
\subsubsection{Comparez vos résultats avec ceux obtenus aux TPs précédents avec les Pthreads et OpenMP. La comparaison
peut être tout autant au niveau des performances finales que du temps ou de la difficulté de programmation.}


Voici une comparaison des résultats pour l'annexe A (le calcul de la somme) avec l'annexe A du TP1 et l'annexe C du TP2.

\begin{center}
\begin{tabular}{|c||c|c|c|c|c|c|c|c|}
  \hline
   Nombre de threads & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 \\
  \hline
   Temps d'exécution annexe A (PThread) & 1.23 & 0.68 & 0.87 & 0.76 & 0.81 & 0.75 & 0.75 & 0.73 \\
  \hline 
  Temps d'exécution annexe C (OpenMP) & 1.04 & 0.54 & 0.37 & 0.30 & 0.36 & 0.30 & 0.30 & 0.29 \\
  \hline
 Temps d'exécution annexe A (TBB) Temps & 1.02 & 0.55 & 0.38 & 0.30 & 0.31 & 0.32 & 0.30 & 0.31 \\
 \hline
 Différence (PThread - TBB) & 0.21 & 0.13 & 0.49 & 0.46 & 0.5 & 0.43 & 0.45 & 0.42
 \\
 \hline
 Différence (OpenMP - TBB) & 0.02 & -0.01 & -0.01 & 0.00 & 0.05 & -0.02 & 0.00 & -0.02
 \\
 \hline 
\end{tabular}
\end{center}

On remarque que l'utilisation de TBB apporte de meilleures performances pour la parallélisation qu'avec PThread.

En effet, une différence notable: environ 0.45 ms s'observe à partir de 3 threads. Cette différence correspond à une amélioration d'environ 60\%. Alors qu'il n'y a presque aucune différence de temps entre OpenMP et TBB.

%TODO : Faire un joli graphique 

\subsubsection{Tracer la courbe du ratio $S(n) = \frac{real(1)}{real(n)}$ en fonction de n.}

\includegraphics[scale=0.5]{graph1.png}
\vspace{0.5cm}

Cette courbe met en illustration le gain performance (gain de temps) entre l'attribution d'un Thread et x Threads pour éxécuter le programme. On s'aperçoit que le gain de temps est assez flagrant entre l'utilisation d'un seul thread et l'attribution de 4! On peut penser qu'avec un ordinateur doté de plus de threads l'allure de la courbe poursuivrait celle représentée entre 1-4 threads. 

\subsubsection{Tracer la courbe du ratio $\frac{S(n)}{n}$ en fonction de n.}

\includegraphics[scale=0.5]{graphe2.png}

Cette courbe décrit l'efficacité apportée par l'ajout de chaque thread. On étudie les 4 premiers points (puisque que nous utilisons une architecture 4 cores). Ceux-ci nous montrent que la gestion des ressources processeurs pour éxécuter le programme est répartie en parts égales au niveau des threads attribués.


\subsection{Annexe C}

\textnormal{Modifier le code de l’annexe en utilisant la bibliothèque TBB ou OpenMP (au choix) et en vous concentrant sur une approche par parallélisme de données. On doit pouvoir fixer le nombre de threads à utiliser en le passant en paramètre de votre programme.}

\subsubsection{Mesurer le temps d’exécution du code de chaque annexe modifiée en faisant varier n, le nombre de threads, de 1 à 8.}

\subsubsection{Tracer la courbe du ratio $S(n) = \frac{real(1)}{real(n)}$ en fonction de n.}

%TODO : Faire une jolie courbe2

\subsubsection{Tracer la courbe du ratio $\frac{S(n)}{n}$ en fonction de n.}

%TODO : Faire une courbe toute mignonne2

\section{Conclusion}

\textnormal{À travers ces trois TPs de programmation parallèle, nous avons pu essayer et comparer différents moyens de paralléliser un programme. Nous avons constaté que l'efficacité des librairies utilisées n'est pas identique. En effet, la performance de la librairie PThread est en dessous de OpenMP et TBB, alors que les résultats obtenus avec ces deux dernières sont assez proches.}
\\
\textnormal{Au niveau performance notre choix se porterait donc sur OpenMP et TBB. Cependant, si l'on rajoute le critère d'interface utilisateur, l'utilisation d'OpenMP est nettement plus simple. À ce titre, si nous étions confrontés à une problématique de parallélisation, notre choix se porterait davantage sur une utilisation d'OpenMP!}

\newpage
\section{Annexes}
\subsection{Code annexe A:}

\begin{lstlisting}[style=C]
#include <stdio.h>
#include <stdlib.h>
#include <tbb/task_scheduler_init.h>
#include <tbb/parallel_reduce.h>
#include <tbb/atomic.h>
#include <tbb/blocked_range.h>

#define N_MAX 100000000LL

using namespace tbb;

struct Sum {
	double value;
	Sum() : value(0) {}
	Sum(Sum& s, split) {value = 0;}
	
	void operator()(const blocked_range<size_t>& r) {
		double temp = value;
		for (long long n=r.begin(); n!=r.end(); ++n) {
			value += n%2 ? 1.0/(double)n : -1.0/(double)n;
		}
	}
	
	void join(Sum& s) {value += s.value;}
	double getValue() {return value;}
};

int main(int argc, char* argv[])
{
	if (argc != 2) {
		printf("Veuillez donner le nb de threads\n");
		return -1;
	}

	task_scheduler_init init(atoi(argv[1]));

	Sum s; 

	parallel_reduce(blocked_range<size_t>(1, N_MAX), s);

	printf("sum: %.12f\n", s.getValue());

	return 0;
}
\end{lstlisting}


\end{document}
